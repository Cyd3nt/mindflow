{
  "mindflow/models/base_model.py": {
    "hash": "80fbc5008d23c77fb26e2368e3d2544ae33cd6075f414ca57c31f176d0738396",
    "index": "\"BaseModel: class for all language models with methods for initialization, getting response, and logging in.\""
  },
  "mindflow/models/chat_gpt.py": {
    "hash": "b0876eb0fff6732e82201467228d4d397f2e3e25a10544bed704ff4e8061b95a",
    "index": "This file is used to load a chatbot model. It contains functions to import modules and access a Chatbot object with specified login credentials. The chatbot may throw a value error if it fails to load."
  },
  "mindflow/prompt_generator.py": {
    "hash": "d9b3afa653fa5f052443cd7dca053ffdf5fc608e8aee8d35c71a6b01e256900e",
    "index": "\"Generating prompt for chatbot based on git diff or user query and references.\""
  },
  "mindflow/query/mfq.py": {
    "hash": "a99ff3d88a664950158a169dddcfe3c34da0c6d0af4b05476cfa0c464547ba68",
    "index": "\"Parsing and validating user query and references from a file for chatbot prompt generation.\""
  },
  "mindflow/resolve/resolve.py": {
    "hash": "7a79e960f6770e3d5ec06dde6184bad2819a55aded0ab0492e22e9a1aafb2e2e",
    "index": "\"Resolving references to text with path and URL resolvers.\""
  },
  "mindflow/resolve/resolver_index.py": {
    "hash": "5d701379ae1cacb93691f93341143e3b93837a278b65b9a33b75047b54aa53ec",
    "index": "\"Generating and updating index of file contents for search engine with hash-based caching and configurable verbosity.\""
  },
  "mindflow/resolve/resolvers/base_resolver.py": {
    "hash": "43ecfae6d215f16ba5ded992d75b442a0cc65fd34336a3a40dc683698da741ed",
    "index": "\"BaseResolver: base class for resolving references to text with should_resolve and resolve methods.\""
  },
  "mindflow/resolve/resolvers/path_resolver.py": {
    "hash": "2ee4aa0d6d45011d9287ff7df6f85dc097004a7e238c6be81f938fc962161526",
    "index": "This file defines a `PathResolver` class that can be used to resolve file or directory paths to text. It contains methods for filtering and trimming files, as well as generating a sub-index of file paths and descriptions. It also has a `should_resolve` method to check if a path is valid, and a `get_response` method that returns the resolved text."
  },
  "mindflow/resolve/resolvers/url_resolver.py": {
    "hash": "950e9d3c66ac31f88399668655f33886bbba019ac2737222e4579788faf1599a",
    "index": "The file defines a URLResolver class that resolves URLs to text by parsing and cleaning the HTML content of a website. The class has methods to check if a string is a valid URL and to return the cleaned text from the website."
  },
  "mindflow/tests/cli_test.py": {
    "hash": "39825242286ac84fce0ef00fc2e79e6f8e3773bb5374b388bdff85322a5df396",
    "index": "This file contains tests for the command line interface of a project called MindFlow. The tests run commands to summarize and query files, and check that the output is as expected."
  },
  "mindflow/utils/exceptions/index_failure.py": {
    "hash": "429314a3699dbb9b83d956974051cf5f22e396de089ef89e9753dc1946b9a172",
    "index": "This file contains two custom exception classes, `IndexGenerationFailure` and `FailureToTrimFiles`, that are raised when an index cannot be generated or files cannot be trimmed, respectively."
  },
  "mindflow/utils/git.py": {
    "hash": "ac282e0bb432df451eff1f2123210789d8150eef6708c3edd120a047b50c97cf",
    "index": "This file contains functions for interacting with Git, including checking if the current directory is within a Git repository and getting the username of the current Git user."
  },
  "mindflow/utils/login_credentials.py": {
    "hash": "442ee6d74754380cb7369ba60f199f0c9c4c5eb3a4a6cff4614860f430ff7a97",
    "index": "This file contains a `get_login_credentials` function that reads or prompts the user for their email, password, and session token and saves the configuration to a file. It returns a dictionary containing the login credentials."
  },
  "mindflow/utils/prompts.py": {
    "hash": "b607296daf558bc7ea532297f6352b9521f0269cc2f7968f59ac6cd1f35721f3",
    "index": "The file contains the prompts for the command line interface, including a prompt for a git diff."
  },
  "mindflow/utils/response.py": {
    "hash": "64d0a17bcb23e8cae7613be04b77fd4d21904e1c6970ce35a75d93394e479dd6",
    "index": "This module contains a function to generate a response from a given prompt using a language model. The response is generated by the model's `get_chat_response` method, and may be returned as output or printed to the console. An exception is raised if the response is not generated successfully."
  },
  "mindflow/utils/validation.py": {
    "hash": "aaaca43c4c3848291aba0140aa1fa5aa423694a2e3bb8d85971dcf1b05049454",
    "index": "The module contains validation functions that check if the total length of files is less than a maximum length value."
  }
}