{
  "mindflow/models/base_model.py": {
    "hash": "80fbc5008d23c77fb26e2368e3d2544ae33cd6075f414ca57c31f176d0738396",
    "index": "\"BaseModel: class for all language models with methods for initialization, getting response, and logging in.\""
  },
  "mindflow/models/chat_gpt.py": {
    "hash": "b0876eb0fff6732e82201467228d4d397f2e3e25a10544bed704ff4e8061b95a",
    "index": "This file is used to load a chatbot model. It contains functions to import modules and access a Chatbot object with specified login credentials. The chatbot may throw a value error if it fails to load."
  },
  "mindflow/prompt_generator.py": {
    "hash": "d9b3afa653fa5f052443cd7dca053ffdf5fc608e8aee8d35c71a6b01e256900e",
    "index": "\"Generating prompt for chatbot based on git diff or user query and references.\""
  },
  "mindflow/query/mfq.py": {
    "hash": "a99ff3d88a664950158a169dddcfe3c34da0c6d0af4b05476cfa0c464547ba68",
    "index": "\"Parsing and validating user query and references from a file for chatbot prompt generation.\""
  },
  "mindflow/resolve/resolve.py": {
    "hash": "7a79e960f6770e3d5ec06dde6184bad2819a55aded0ab0492e22e9a1aafb2e2e",
    "index": "\"Resolving references to text with path and URL resolvers.\""
  },
  "mindflow/resolve/resolver_index.py": {
    "hash": "5d701379ae1cacb93691f93341143e3b93837a278b65b9a33b75047b54aa53ec",
    "index": "\"Generating and updating index of file contents for search engine with hash-based caching and configurable verbosity.\""
  },
  "mindflow/resolve/resolvers/base_resolver.py": {
    "hash": "43ecfae6d215f16ba5ded992d75b442a0cc65fd34336a3a40dc683698da741ed",
    "index": "\"BaseResolver: base class for resolving references to text with should_resolve and resolve methods.\""
  },
  "mindflow/resolve/resolvers/path_resolver.py": {
    "hash": "2ee4aa0d6d45011d9287ff7df6f85dc097004a7e238c6be81f938fc962161526",
    "index": "This file defines a `PathResolver` class that can be used to resolve file or directory paths to text. It contains methods for filtering and trimming files, as well as generating a sub-index of file paths and descriptions. It also has a `should_resolve` method to check if a path is valid, and a `get_response` method that returns the resolved text."
  },
  "mindflow/resolve/resolvers/url_resolver.py": {
    "hash": "950e9d3c66ac31f88399668655f33886bbba019ac2737222e4579788faf1599a",
    "index": "The file defines a URLResolver class that resolves URLs to text by parsing and cleaning the HTML content of a website. The class has methods to check if a string is a valid URL and to return the cleaned text from the website."
  },
  "mindflow/tests/cli_test.py": {
    "hash": "39825242286ac84fce0ef00fc2e79e6f8e3773bb5374b388bdff85322a5df396",
    "index": "This file contains tests for the command line interface of a project called MindFlow. The tests run commands to summarize and query files, and check that the output is as expected."
  },
  "mindflow/utils/exceptions/index_failure.py": {
    "hash": "429314a3699dbb9b83d956974051cf5f22e396de089ef89e9753dc1946b9a172",
    "index": "This file contains two custom exception classes, `IndexGenerationFailure` and `FailureToTrimFiles`, that are raised when an index cannot be generated or files cannot be trimmed, respectively."
  },
  "mindflow/utils/git.py": {
    "hash": "ac282e0bb432df451eff1f2123210789d8150eef6708c3edd120a047b50c97cf",
    "index": "This file contains functions for interacting with Git, including checking if the current directory is within a Git repository and getting the username of the current Git user."
  },
  "mindflow/utils/login_credentials.py": {
    "hash": "442ee6d74754380cb7369ba60f199f0c9c4c5eb3a4a6cff4614860f430ff7a97",
    "index": "This file contains a `get_login_credentials` function that reads or prompts the user for their email, password, and session token and saves the configuration to a file. It returns a dictionary containing the login credentials."
  },
  "mindflow/utils/prompts.py": {
    "hash": "b607296daf558bc7ea532297f6352b9521f0269cc2f7968f59ac6cd1f35721f3",
    "index": "The file contains the prompts for the command line interface, including a prompt for a git diff."
  },
  "mindflow/utils/response.py": {
    "hash": "64d0a17bcb23e8cae7613be04b77fd4d21904e1c6970ce35a75d93394e479dd6",
    "index": "This module contains a function to generate a response from a given prompt using a language model. The response is generated by the model's `get_chat_response` method, and may be returned as output or printed to the console. An exception is raised if the response is not generated successfully."
  },
  "mindflow/utils/validation.py": {
    "hash": "aaaca43c4c3848291aba0140aa1fa5aa423694a2e3bb8d85971dcf1b05049454",
    "index": "The module contains validation functions that check if the total length of files is less than a maximum length value."
  },
  "vscode_extension/mindflow/.eslintrc.json": {
    "hash": "f9d5e0dbbe18070ff7c6e125fcf9a7e24611cfde008b32faa33aee72b9996b3d",
    "index": "This file is a configuration file for the linting tool ESLint. It specifies the parser to use, parser options, plugins, rules, and files to ignore when linting."
  },
  "vscode_extension/mindflow/.gitignore": {
    "hash": "d86d936b5aca66dae66f54d7db03853fe8f9528c2245b005ac9ecdf3f94bb0aa",
    "index": "This file is a list of file paths to exclude from a project. It includes all files in the `node_modules` directory, the `package-lock.json` file, and all files in the `out` directory."
  },
  "vscode_extension/mindflow/.vscode/extensions.json": {
    "hash": "14fd32798e8cf876d70480bc882aed7a09bcf599a03d64db561adaa1d6096602",
    "index": "This file is a configuration file for the Visual Studio Code editor. It specifies recommendations for editor extensions, in this case recommending the \"dbaeumer.vscode-eslint\" extension."
  },
  "vscode_extension/mindflow/.vscode/launch.json": {
    "hash": "a1fff6b7ce0128a357ec1eea901637a85c0b7ef74629549a1c90f646c587d32e",
    "index": "This file is a configuration file for the Visual Studio Code editor. It contains launch configurations for running and testing an extension. It specifies settings such as the name, type, arguments, and task to run before launching the extension."
  },
  "vscode_extension/mindflow/.vscode/settings.json": {
    "hash": "1675fe797f525e9ea64cfaf72425f0e0981b2c3fff02f399ac6788b6434b665a",
    "index": "This file is a configuration file for the Visual Studio Code editor. It specifies settings such as which files to exclude from the editor and from search results, and it turns off automatic detection of TypeScript tasks."
  },
  "vscode_extension/mindflow/.vscode/tasks.json": {
    "hash": "cecd0f8f99d153170ca1e1bee74141da11f7c47bfe0932078ad7c0c187c4c434",
    "index": "This file is a configuration file for the Visual Studio Code editor. It specifies a task to run using the `npm` command. The task is set to run in the background and is grouped under the \"build\" category. The task is specified using the `script` property, and the `problemMatcher` property specifies which problem matcher to use when running the task."
  },
  "vscode_extension/mindflow/.vscodeignore": {
    "hash": "99217d86d6cea3a008e1e48daf1fc51421b0ff5f0e2b55607652cabaa24a6c6b",
    "index": "This file is a list of file paths to exclude from a project. It includes all files and directories in the `.vscode` and `.vscode-test` directories, all files in the `src` directory, and various configuration files, such as `.gitignore`, `.yarnrc`, and `tsconfig.json`. It also includes all files with the `.map` and `.ts` file extensions."
  },
  "vscode_extension/mindflow/CHANGELOG.md": {
    "hash": "b03fd7a1775510d5e820bb5772613aba8391be9c1abd4a8e0ee88baca657f905",
    "index": "This file is a changelog for the \"mindflow\" extension. It lists notable changes to the extension, with the most recent changes listed under the \"Unreleased\" heading. The file follows the recommendations of the \"Keep a Changelog\" document."
  },
  "vscode_extension/mindflow/README.md": {
    "hash": "09d3e7f98ca57d31f1e609402c840cb560fb9260650014c4f616c22e9965b736",
    "index": "This file is a README for the \"mindflow\" extension for the Visual Studio Code editor. It provides an overview of the extension's features, requirements, settings, and known issues. It also includes release notes and instructions for working with Markdown."
  },
  "vscode_extension/mindflow/language-configuration.json": {
    "hash": "ec9b236bbd36cf1494068d8d3e1c67deb671eaa69fede4b70ccc614a7e865c86",
    "index": "This file is a configuration file for the Visual Studio Code editor. It specifies settings for comments, brackets, and auto-closing and surrounding pairs for the language the file is associated with. These settings determine how the editor will handle language-specific syntax when editing a file."
  },
  "vscode_extension/mindflow/package.json": {
    "hash": "2a77cb03100df9d002ebe4439f14aab1c79c556c17c9322347c045456b4c2794",
    "index": "This file is a package manifest for an extension for the Visual Studio Code editor. It specifies metadata for the extension, such as its name, description, and version, as well as its dependencies and scripts. It also defines the extension's activation events, and contributes commands, languages, and grammars to the editor."
  },
  "vscode_extension/mindflow/src/extension.ts": {
    "hash": "3538d39a66899b0250d66de5210f025826704a4fb278548b1a3349d746b99e65",
    "index": "The file contains code that creates a query file, writes a query to it, and sends the query to a terminal using the `mf` command. It also includes a function to open the query file in a text editor and a function to handle the closing of the query file."
  },
  "vscode_extension/mindflow/src/test/runTest.ts": {
    "hash": "19d3aeb6cf0da4dc150243d9f5399a91eb4d7d13d5aa94e64ebe79250a46f7c6",
    "index": "This file contains a script that runs tests for a VS Code extension. It imports the `runTests` function from the `@vscode/test-electron` module and uses it to run the tests in the `./suite/index` directory. The script also specifies the path to the extension's manifest file (`package.json`) and the path to the test runner."
  },
  "vscode_extension/mindflow/src/test/suite/extension.test.ts": {
    "hash": "01620e51ccb2919d33fdedb05ccc005a27d55ab92e107c894eda4edc1c781f88",
    "index": "This file contains a test suite for a VS Code extension. The suite contains a single test that uses the `assert` module to test whether certain values are included in an array. The test suite uses the `vscode` module to display a message in the VS Code window."
  },
  "vscode_extension/mindflow/src/test/suite/index.ts": {
    "hash": "303598a15f6d31dcc4e29c20702b085490dd039577d3ca2f7914d011d5c9d4f9",
    "index": "This file contains a script that runs tests using the Mocha test framework. The script uses the `glob` module to find all files ending in `.test.js` in the `testsRoot` directory, and adds them to a Mocha test suite. It then runs the test suite and returns a promise that resolves if all tests pass, or rejects if any tests fail. The script uses the `mocha` module to create and configure the test suite, and the `path` module to work with file paths."
  },
  "vscode_extension/mindflow/syntaxes/mfq.tmLanguage.json": {
    "hash": "7ce9daa6e359538621c2fdd4b9f48b2fa00b1f559389343d8bbac94aa3f4a3f9",
    "index": "This file is a JSON-formatted syntax definition file for the MindFlow Query language. It specifies the syntax and structure of the language using regular expressions, and defines the scope and names of different language elements, such as keywords and strings. The file is used by text editors and other tools to enable syntax highlighting and other language-aware features for MindFlow Query."
  }
}